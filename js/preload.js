const { contextBridge, ipcRenderer } = require("electron/renderer")

contextBridge.exposeInMainWorld("electronAPI", {
  getDatabaseStatus: () => ipcRenderer.invoke("get-database-status"),
  getAllFromTable: (data) => ipcRenderer.invoke("get-all-from-table", data),
  getTeachers: (data) => ipcRenderer.invoke("get-teachers", data),
  getPersonalPlan: (data) => ipcRenderer.invoke("get-personal-plan", data),
  getAllPersonalPlans: () => ipcRenderer.invoke("get-all-personal-plans"),
  getSyllabus: (data) => ipcRenderer.invoke("get-syllabus", data),
  getDisciplines: (data) => ipcRenderer.invoke("get-disciplines", data),
  getTypes: (data) => ipcRenderer.invoke("get-types", data),
  getFlows: (data) => ipcRenderer.invoke("get-flows", data),
  getGroups: (data) => ipcRenderer.invoke("get-groups", data),
  getCurrentListOfTeachers: (data) => ipcRenderer.invoke("get-current-list-teachers", data),
  getCurrentSyllabusForPeronalHours: (data) => ipcRenderer.invoke("get-actual-syllabus-for-personal-hours", data),

  updatePersonalPlan: (data) => ipcRenderer.invoke("update-personal-plan", data),
  updateSyllabus: (data) => ipcRenderer.invoke("update-syllabus", data),
  updateDiscipline: (data) => ipcRenderer.invoke("update-discipline", data),
  updateType: (data) => ipcRenderer.invoke("update-type", data),
  updateFlows: (data) => ipcRenderer.invoke("update-flows", data),
  updateGroups: (data) => ipcRenderer.invoke("update-groups", data),
  updateTeacher: (data) => ipcRenderer.invoke("update-teacher", data),

  insertPersonalPlan: (data) => ipcRenderer.invoke("insert-personal-plan", data),
  insertSyllabus: (data) => ipcRenderer.invoke("insert-syllabus", data),
  insertDiscipline: (data) => ipcRenderer.invoke("insert-discipline", data),
  insertType: (data) => ipcRenderer.invoke("insert-type", data),
  insertFlow: (data) => ipcRenderer.invoke("insert-flow", data),
  insertGroup: (data) => ipcRenderer.invoke("insert-group", data),
  insertTeacher: (data) => ipcRenderer.invoke("insert-teacher", data),

  deleteFromPersonalPlan: (data) => ipcRenderer.invoke("delete-from-personal-plan", data),
  deleteFromSyllabus: (data) => ipcRenderer.invoke("delete-from-syllabus", data),
  deleteType: (data) => ipcRenderer.invoke("delete-type", data),
  deleteDiscipline: (data) => ipcRenderer.invoke("delete-discipline", data),
  deleteFlow: (data) => ipcRenderer.invoke("delete-flow", data),
  deleteGroup: (data) => ipcRenderer.invoke("delete-group", data),
  deleteTeacher: (data) => ipcRenderer.invoke("delete-teacher", data),
})